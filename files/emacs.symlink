(require 'package)
(require 'cl)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))

(defvar elpa-packages '(
                        company
                        elpy
                        farmhouse-theme
                        autopair
                        alpha
                        flycheck
                        evil-leader
                        helm
                        helm-company
                        powerline
                        beacon
                        smex
                        org-ac
                        highlight-parentheses))

(defun cfg:install-packages ()
  (let ((pkgs (remove-if #'package-installed-p elpa-packages)))
    (when pkgs
      (message "%s" "Emacs refresh packages database...")
      (package-refresh-contents)
      (message "%s" " done.")
      (dolist (p elpa-packages)
        (package-install p)))))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(cfg:install-packages)

(elpy-enable)

(load-theme 'farmhouse-dark t)
(powerline-default-theme )

(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(menu-bar-mode 1)
(scroll-bar-mode 1)
(tool-bar-mode -1)

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(global-linum-mode t)

(global-font-lock-mode 1)
(setq font-lock-maximum-decoration t)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-icalendar-use-scheduled '(event-if-todo
          event-if-not-todo todo-start))

(setq org-agenda-files (list "~/git/orgmode/personal.org"
                     "~/git/orgmode/goals2016.org" ))

(require 'org-ac)
(org-ac/config-default)
(setq calendar-week-start-day 1)

(defun myerc()
  (interactive)
  (setq erc-nick (getenv "ERCUSER"))
  (setq erc-password (getenv "ERCPASSWD"))
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))
  (erc-track-mode t)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"))
  (erc :server "irc.freenode.net" :port 6667 :nick erc-nick :password erc-password)
  (erc-autojoin-mode t)
  (setq erc-autojoin-channels-alist
        '((".*\\.freenode.net" "#emacs"))))

(require 'helm-config)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x m") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
;(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)

(setq visible-bell nil)
(setq ring-bell-function 'ignore)

(setq initial-frame-alist
      '((width . 110) (height . 50)))

(global-set-key (kbd "C-x e") (lambda() (interactive)(find-file "~/.emacs")))

; Scrolling !
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

(setq eide-custom-color-theme 'dark)
(setq eide-custom-menu-use-specific-background-color nil)

(beacon-mode 1)
(global-set-key (kbd "M-x") 'smex)
(ac-config-default)
(autopair-global-mode)

                   ; Markdown
(autoload 'markdown-mode "markdown-mode"
       "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(powerline-center-evil-theme)
(setq powerline-default-separator 'wave)

(require 'recentf)
(recentf-mode 1)

(require 'alpha)
(global-set-key (kbd "<f1>") 'transparency-decrease)
(global-set-key (kbd "<f2>") 'transparency-increase)

(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")
(evil-mode 1)

(set-input-method 'spanish-prefix)

;(eide-start)
;(projectile-global-mode)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(case-fold-search nil)
 '(cua-mode t nil (cua-base))
 '(package-selected-packages
   (quote
    (ansible highlight-parentheses org-ac smex beacon powerline helm-company helm evil-leader flycheck alpha autopair farmhouse-theme elpy company)))
 '(tool-bar-mode nil))

(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
