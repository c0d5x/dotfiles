" vim: syntax=vim foldmethod=marker foldlevel=1
" Set options {{{

" removed due to inconsistencies
" set nocompatible

syntax on
set t_Co=256

" display number on left side and status bar
set ruler
set number
set norelativenumber

" monitor file changes
set autoread

" case
set ignorecase
set smartcase

" let me change buffers when mod
set hidden

" set spell by default, in code it applies to comments
" set spell

" display statusbar
set laststatus=2

" enable mouse
set mouse=a

" indents
set autoindent
set smartindent

" encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
if has('multi_byte')
  if &termencoding ==# ''
    let &termencoding = &encoding
  endif

  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" lines from cursor to bottom
set scrolloff=10

set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.o
set wildignore+=*DS_Store*
set wildignore+=*.pyc

" decent backspace
set backspace=indent,eol,start

" when searching
set showmatch
set incsearch
" set nohlsearch
set hlsearch

" annoying sounds
set noerrorbells
set visualbell
set t_vb=

set clipboard=unnamedplus

" on splits
set splitright
set splitbelow

" default file format
set fileformats=unix,mac,dos

" fold enabled
set foldmethod=indent
set foldlevel=5

set textwidth=0        " more realistic size
set colorcolumn=0
" highlight ColorColumn guibg=#2d2d2d ctermbg=246
" highlight Normal ctermfg=grey ctermbg=#0e143d

" highligh current row and column
set cursorline
set cursorcolumn

" Tabs
set tabstop=2
set shiftwidth=2
set expandtab

set wrap
set linebreak
set showbreak=â†ª

set ttyfast
set title

set showcmd
set showmode

" invisible chars
set list
" set listchars=tab:â–¸\ ,eol:Â¬,trail:Â·,nbsp:Â·,space:Â·
set listchars=tab:â–¸\ ,trail:Â·,nbsp:Â·
" â†’

" history, backups and undo levels
set undofile
set history=1000
set undolevels=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), 'p')
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), 'p')
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), 'p')
endif

set viminfo=%,<800,'10,/50,:100,h,f9,n~/.viminfo
"           | |    |   |   |    | |  + viminfo file path
"           | |    |   |   |    | + file marks 0-9,A-Z 0=NOT stored
"           | |    |   |   |    + disable 'hlsearch' loading viminfo
"           | |    |   |   + command-line history saved
"           | |    |   + search history saved
"           | |    + files marks saved
"           | + lines saved each register (old name for <, vi6.2)
"           + save/restore buffer list

filetype plugin on
filetype indent on
" set omnifunc=syntaxcomplete#Complete

" vim uses
" if has('python3')
"  let g:pymode_python = 'python3'
" else
"   let g:pymode_python = 'python'
" endif

" Fix powerline not part of virtualenv
" python3 import sys
" python3 import os
" python3 sys.path.append(os.environ['HOME'] + "/.local/lib/python3.7/site-packages")

let g:mapleader = "\<Space>"
let g:maplocalleader = "\\"

let g:gutentags_ctags_tagfile = '.git/tags'

" Macros
let @e = ':s,=,: ,g'
let @b = '/ xiwww'
" let @c = 'v$hyjDpjkj'
let @c = 'v$h"tyjD"tp'
let @h = 'ggO# coding: utf-8"""HeaderThis is the header"""'

" }}}

" Plugin configurations {{{
let g:easytags_async = 1
let g:easytags_file = '~/.vim/tags'

let g:netrw_banner                       = 0
let g:netrw_browse_split                 = 2
let g:netrw_winsize                      = 25
"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts            = 1
" let g:airline_section_b                  = '%{strftime("%F %H:%M")}'

" airline symbols
let g:airline_left_sep                   = 'î‚°'
let g:airline_left_alt_sep               = 'î‚±'
let g:airline_right_sep                  = 'î‚²'
let g:airline_right_alt_sep              = 'î‚³'

let g:airline#extensions#ale#enabled     = 1

let g:python_highlight_all               = 1

" let g:org_agenda_files                   = ['~/git/work/org/*.org']

let g:Powerline_symbols     = 'fancy'

let g:vimwiki_hl_headers    = 1
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_path=$HOME.'/git/work/vimwiki'
let g:vimwiki_html_path=$HOME.'/git/work/vimwiki_html'
let g:vimwiki_list = [{       'path': vimwiki_path,
                       \ 'path_html': vimwiki_html_path,
                       \ 'template_path': vimwiki_html_path.'/assets',
                       \ 'template_default': 'default',
                       \ 'template_ext': '.tpl'}]

let g:tagbar_width       = 25
let g:tagbar_compact     = 1
let g:tagbar_singleclick = 1
let g:tagbar_autoshowtag = 1

let g:terraform_align=1
let g:terraform_fmt_on_save=1

let g:limelight_conceal_ctermfg = 'gray'

let g:ale_completion_enabled = 0

" }}}

" Plugins to install {{{
call plug#begin('~/.vim/plugged')

Plug 'powerline/powerline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'altercation/vim-colors-solarized'

Plug 'mhinz/vim-startify'

Plug 'vimwiki/vimwiki'

Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'ludovicchabant/vim-gutentags'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/limelight.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'

Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'

Plug 'phenomenes/ansible-snippets'
Plug 'hashivim/vim-terraform'
" Plug 'pearofducks/ansible-vim'

Plug 'davidhalter/jedi-vim'

Plug 'w0rp/ale'

call plug#end()
" }}}

" Autocommands & Autogroups {{{
"

augroup default
  " fold exception for startified, using startified's event
  au User Startified normal! zR
  au VimResized * :wincmd =
  " Remove trailing spaces for file types:
  au BufWritePre *.py,*.c,*.rb,*.java %s/\s\+$//e
augroup END

"
augroup resCur
autocmd!
autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END

" fix crontab -e problem
set backupskip=/tmp/*,/private/tmp/*
" autocmd filetype crontab setlocal nobackup nowritebackup

" Python section
augroup mypython
au!
au FileType python setl tabstop=4
au FileType python setl softtabstop=4
au FileType python setl shiftwidth=4
au FileType python setl textwidth=79
au FileType python setl expandtab
au FileType python setl autoindent
au FileType python setl fileformat=unix
augroup end

" Terraform section
augroup myterraform
au!
au FileType terraform setl expandtab     " Use spaces instead of tabs.
au FileType terraform setl tabstop=2     " A tab counts for 4 spaces.
au FileType terraform setl softtabstop=2 " Causes backspace to delete 4 spaces.
au FileType terraform setl shiftwidth=2  " Shift by 4 spaces.
au FileType terraform setl foldmethod=indent " fold method is indent for terraform
au FileType terraform setl foldlevel=2 " fold method is indent for terraform
au FileType terraform setl fileformat=unix
augroup end

" Git commits
augroup mygitcommit
au!
au FileType gitcommit setl spell     " Enable spellchecking.
au FileType gitcommit setl expandtab " Use spaces instead of tabs.
augroup end

" Markdown
augroup mymarkdown
au!
au FileType markdown setl spell         " Enable spellchecking.
au FileType markdown setl expandtab     " Use spaces instead of tabs.
au FileType markdown setl tabstop=2     " Lists are indented with 2 spaces.
au FileType markdown setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType markdown setl shiftwidth=2  " Shift by 2 spaces.
augroup end

augroup myansible
au!
au BufNewFile,BufRead *.yml set filetype=yaml.ansible
au FileType yaml.ansible setl expandtab     " Use spaces instead of tabs.
au FileType yaml.ansible setl tabstop=2     " Lists are indented with 2 spaces.
au FileType yaml.ansible setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType yaml.ansible setl shiftwidth=2  " Shift by 2 spaces.
augroup end

augroup vimwiki
au!
au BufEnter * silent! lcd %:p:h
" au BufRead ~/git/work/vimwiki/index.wiki :!git pull<CR>
au BufWritePost ~/git/work/vimwiki/* :VimwikiDiaryGenerateLinks<CR>
au FileType vimwiki setl textwidth=80
augroup end

" }}}

" Theme configuration {{{
let g:solarized_termcolors=256
try
    colorscheme solarized
    " colorscheme torte
    " colorscheme dracula
    " colorscheme nova
    " colorscheme morning
    " colorscheme darkblue
catch
    colorscheme default
endtry

" also respect the transparency of the terminal
highlight Normal guibg=NONE ctermbg=NONE

" enable italic comments
highlight Comment cterm=italic

set background=light

if has('gui_running')
  " set background=light
  " set t_Co=16
  " let g:solarized_termcolors=16
  " colorscheme solarized
endif

" }}}

" Mappings {{{

imap jk <Esc>

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>m :bp<CR>
nnoremap <Leader>c :tabnew<CR>
nnoremap <Leader>e :tabedit $MYVIMRC<CR>
nnoremap <Leader>b :NERDTreeToggle<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>E :EasyAlign=<CR>

map <Leader>h <C-w>h
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>l <C-w>l

" I want it to work on all modes
map <C-l> :buffers<CR>

imap <C-]> <ESC>

" }}}

" Functions and other {{{

" }}}
"
