" vim: syntax=vim foldmethod=marker foldlevel=1

" Set options {{{

set nocompatible

syntax on

" display number on left side and status bar
set ruler
set number
set norelativenumber

" monitor file changes
set autoread

" let me change buffers when mod
set hidden

" display statusbar
set laststatus=2

" enable mouse
set mouse=a

" indents
set autoindent
set smartindent

" lines from cursor to bottom
set scrolloff=10

set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.o
set wildignore+=*DS_Store*
set wildignore+=*.pyc

" decent backspace
set backspace=indent,eol,start

" when searching
set showmatch
set incsearch
set nohlsearch

" annoying sounds
set noerrorbells
set visualbell
set t_vb=

" required for osx clipboard
set clipboard=unnamed

" on splits
set splitright
set splitbelow

" default file format
set ffs=unix,mac,dos

set foldmethod=indent
set foldlevel=3

set textwidth=120        " more realistic size
set colorcolumn=+1
highlight ColorColumn guibg=#2d2d2d ctermbg=246
" highlight Normal ctermfg=grey ctermbg=#0e143d

" highligh current row and column
set cursorline
set cursorcolumn

" Tabs
set tabstop=2
set shiftwidth=2
set expandtab

set wrap
set linebreak
set showbreak=↪

set background=dark
" set guifont=Monaco:h13
" set guifont=Source\ Code\ Pro\ for\ Powerline
" set guifont=Ubuntu\ Mono\ derivative\ Powerline\ Regular
" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12
" set guifontwide=Source\ Code\ Pro\ for\ Powerline
" set guifontwide=Ubuntu\ Mono\ derivative\ Powerline\ Regular

" should be on but making sure
set ttyfast
set title

set showcmd
set showmode

set viminfo='10,\"100,:100,%,n~/.viminfo

" encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif

  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" invisible chars
set list
" set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·,space:·
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·
" →

" history, backups and undo levels
set undofile
set history=1000
set undolevels=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif


filetype plugin on
filetype indent on

let mapleader = "\<Space>"
let maplocalleader = "\\"

if exists('*jobstart')
    " NEOVIM ON
    set viminfo='10,\"100,:100,%,n~/.viminfo
else
    " Vim only
    set viminfo='10,\"100,:100,%,n~/.viminfo_vim
endif

" }}}

" Plugins to install {{{
call plug#begin('~/.vim/plugged')

" Plug 'chase/vim-ansible-yaml'
" Plug 'hdima/python-syntax'
" Plug 'jceb/vim-orgmode'
" Plug 'klen/python-mode'
" Plug 'motemen/git-vim'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-bufferline'
Plug 'bsdelf/bufferhint'
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'chr4/sslsecure.vim'
Plug 'davidhalter/jedi-vim'
Plug 'dracula/vim'
Plug 'easymotion/vim-easymotion'
Plug 'hashivim/vim-terraform'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align'
Plug 'kien/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'mattn/calendar-vim'
Plug 'mhinz/vim-startify'
Plug 'mileszs/ack.vim'
Plug 'pearofducks/ansible-vim'
Plug 'powerline/powerline'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'valloric/youcompleteme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'vimwiki/vimwiki'

" Chef
Plug 'glidenote/vim-chef'
Plug 'gregf/ultisnips-chef'
call plug#end()
" }}}

" Plugin configurations {{{
"
let g:netrw_banner                       = 0
let g:netrw_browse_split                 = 2
let g:netrw_winsize                      = 25
"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts            = 1
" let g:airline_section_b                  = '%{strftime("%F %H:%M")}'

" airline symbols
" let g:airline_left_sep                   = "\uE0C0"
" let g:airline_right_sep                  = "\uE0C2"
let g:airline_left_sep                   = ''
let g:airline_left_alt_sep               = ''
let g:airline_right_sep                  = ''
let g:airline_right_alt_sep              = ''

let g:jedi#goto_command                  = ""
let g:jedi#goto_assignments_command      = "<leader>g"
let g:jedi#goto_definitions_command      = "<leader>d"
let g:jedi#documentation_command         = "K"
let g:jedi#usages_command                = "<leader>u"
let g:jedi#completions_command           = "<C-Space>"
let g:jedi#rename_command                = "<leader>n"

let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsListSnippets        = "<c-s>"

" exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"


" let g:UltiSnipsSnippetsDir        = "UltiSnippets"
" let g:UltiSnipsSnippetDirectories = [ "~/git/vim-snips", "~/.vim/plugged/vim-snippets" ]


let g:ycm_auto_trigger                   = 1

let g:ycm_key_list_select_completion     = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion   = ['<C-p>', '<Up>']

let g:snips_author                       = "Jose Hidalgo"
let g:snips_author_email                 = "c0d5x@protonmail.com"
let g:snips_email                        = "c0d5x@protonmail.com"
let g:snips_github                       = "https://github.com/c0d5x"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_loc_list_height          = 4
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

let g:syntastic_error_symbol             = "\u00A7"
let g:syntastic_style_error_symbol       = "\u2717"
let g:syntastic_warning_symbol           = "\u26A0"
let g:syntastic_style_warning_symbol     = "\u0482"
let g:syntastic_enable_highlighting      = 1

let g:syntastic_python_checkers          = ['flake8', 'pylint']
let g:syntastic_python_flake8_exec       = 'python3'
let g:syntastic_python_flake8_args       = ['-m', 'flake8']
let g:syntastic_python_flake8_post_args  = '--ignore=E501,E221'
let g:pymode_lint_ignore                 = "E501"
let g:pymode_rope_lookup_project         = 0

let g:rubycomplete_buffer_loading        = 1
let g:rubycomplete_rails                 = 1

let python_highlight_all                 = 1

let g:org_agenda_files                   = ['~/git/work/org/*.org']

nnoremap - :call bufferhint#Popup()<CR>
nnoremap \ :call bufferhint#LoadPrevious()<CR>

try
    " solarized requires solarized iterm's colors set in preferences
    " colorscheme solarized
    colorscheme dracula
    " colorscheme morning
catch
    colorscheme darkblue
endtry

" after changing the colorscheme, set italic for comments
" iterm2 needs a font with italics, also terminfo has to support italics
highlight Comment cterm=italic


"if exists(':RainbowParenthesesActivate')
let g:rbpt_colorpairs = [
\ ['darkgreen',   'firebrick3'],
\ ['darkcyan',    'SeaGreen3'],
\ ['darkred',     'DarkOrchid3'],
\ ['black',       'SeaGreen3'],
\ ['Darkblue',    'firebrick3'],
\ ['darkcyan',    'RoyalBlue3'],
\ ['darkred',     'SeaGreen3'],
\ ['darkmagenta', 'DarkOrchid3'],
\ ['brown',       'firebrick3'],
\ ['gray',        'RoyalBlue3'],
\ ['red',         'firebrick3'],
\ ['brown',       'RoyalBlue3'],
\ ['darkgreen',   'RoyalBlue3'],
\ ['darkmagenta', 'DarkOrchid3'],
\ ['darkgray',    'DarkOrchid3'],
\ ['Darkblue',    'SeaGreen3'],
\ ]
    autocmd VimEnter * RainbowParenthesesActivate
    autocmd Syntax * RainbowParenthesesLoadRound
    autocmd Syntax * RainbowParenthesesLoadSquare
    autocmd Syntax * RainbowParenthesesLoadBraces
    autocmd Syntax * RainbowParenthesesLoadChevrons
"endif

let g:Powerline_symbols     = 'fancy'

let g:vimwiki_hl_headers    = 1
let g:vimwiki_hl_cb_checked = 1
let vimwiki_path=$HOME.'/git/work/vimwiki'
let vimwiki_html_path=$HOME.'/git/work/vimwiki_html'
let g:vimwiki_list = [{       'path': vimwiki_path,
                       \ 'path_html': vimwiki_html_path,
                       \ 'template_path': vimwiki_html_path.'/assets',
                       \ 'template_default': 'default',
                       \ 'template_ext': '.tpl'}]


let g:tagbar_width       = 25
let g:tagbar_compact     = 1
let g:tagbar_singleclick = 1
let g:tagbar_autoshowtag = 1


" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>W <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)


" }}}

" Autocommands & Autogroups {{{
"
augroup resCur
autocmd!
autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END


" fix crontab -e problem
set backupskip=/tmp/*,/private/tmp/*
" autocmd filetype crontab setlocal nobackup nowritebackup

" Reload when vimrc is changed
augroup reload_vimrc " {
autocmd!
autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" if exists(':Neomake')
"    autocmd! BufWritePost * Neomake
" endif

" if exists("g:loaded_tagbar")
autocmd VimEnter * nested :call tagbar#autoopen(1)
" endif

autocmd VimResized * :wincmd =

" Remove trailing spaces for file types:
au BufWritePre *.py,*.c,*.rb,*.java %s/\s\+$//e

" Python section
augroup python
au!
au FileType python setl expandtab     " Use spaces instead of tabs.
au FileType python setl tabstop=4     " A tab counts for 4 spaces.
au FileType python setl softtabstop=4 " Causes backspace to delete 4 spaces.
au FileType python setl shiftwidth=4  " Shift by 4 spaces.
au FileType python setl foldmethod=indent " fold method is indent for python
au FileType python nnoremap <Leader>r :!python %<CR>
augroup end

" Ruby section
augroup ruby
au!
au FileType ruby nnoremap <Leader>r :w<CR>:!ruby -r debug %<CR>
augroup end

" Javascript section
augroup javascript
au!
augroup end

" Terraform section
augroup terraform
au!
au FileType terraform setl expandtab     " Use spaces instead of tabs.
au FileType terraform setl tabstop=2     " A tab counts for 4 spaces.
au FileType terraform setl softtabstop=2 " Causes backspace to delete 4 spaces.
au FileType terraform setl shiftwidth=2  " Shift by 4 spaces.
au FileType terraform setl foldmethod=indent " fold method is indent for terraform
au FileType terraform setl foldlevel=2 " fold method is indent for terraform
au FileType terraform nnoremap <Leader>r :!terraform plan %<CR>
augroup end

" Git commits
augroup gitcommit
au!
au FileType gitcommit setl spell     " Enable spellchecking.
au FileType gitcommit setl expandtab " Use spaces instead of tabs.
augroup end

" Markdown
augroup markdown
au!
au FileType markdown setl spell         " Enable spellchecking.
au FileType markdown setl expandtab     " Use spaces instead of tabs.
au FileType markdown setl tabstop=2     " Lists are indented with 2 spaces.
au FileType markdown setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType markdown setl shiftwidth=2  " Shift by 2 spaces.
augroup end

augroup vimwiki
au!
au BufEnter * silent! lcd %:p:h
au BufRead ~/git/work/vimwiki/index.wiki :!git pull<CR>
au BufWritePost ~/git/work/vimwiki/* :VimwikiDiaryGenerateLinks<CR>
augroup end

" autocmd FileType c nnoremap <buffer> <silent> <C-]> :YcmCompleter GoTo<cr>
" }}}

" Mappings {{{

imap jk <Esc>

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>m :bp<CR>
nnoremap <Leader>c :tabnew<CR>
nnoremap <Leader>e :tabedit $MYVIMRC<CR>
" nnoremap <Leader>t :tabedit ~/org/index.org<CR>
nnoremap <Leader>b :NERDTree<CR>
nnoremap <Leader>E :EasyAlign=<CR>

nnoremap <Leader>i G?^import<CR>:nohlsearch<CR>oimport

nnoremap <Localleader>r :!python %<CR>
inoremap # X<BS>#

map <Leader>h <C-w>h
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>l <C-w>l

" I want it to work on all modes
map <C-l> :buffers<CR>

imap <C-]> <ESC>

" }}}

" Functions and other {{{

function! ShuffleLines()
ruby << EOF
    buf = VIM::Buffer.current
    firstnum =  VIM::evaluate('a:firstline')
    lastnum = VIM::evaluate('a:lastline')
    lines = []
    firstnum.upto(lastnum) do |lnum|
      lines << buf[lnum]
    end
    lines.shuffle!
    firstnum.upto(lastnum) do |lnum|
      buf[lnum] = lines[lnum-firstnum]
    end
EOF
endfunction
command! -bar Shuffle  call ShuffleLines()

" }}}
