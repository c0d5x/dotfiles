" vim: syntax=vim foldmethod=marker foldlevel=1

" Set options {{{

set nocompatible

syntax on
set t_Co=256

" display number on left side and status bar
set ruler
set number
set norelativenumber

" monitor file changes
set autoread

" let me change buffers when mod
set hidden

" set spell by default, in code it applies to comments
" set spell

" display statusbar
set laststatus=2

" enable mouse
set mouse=a

" indents
set autoindent
set smartindent

" encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif

  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" lines from cursor to bottom
set scrolloff=10

set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.o
set wildignore+=*DS_Store*
set wildignore+=*.pyc

" decent backspace
set backspace=indent,eol,start

" when searching
set showmatch
set incsearch
set nohlsearch

" annoying sounds
set noerrorbells
set visualbell
set t_vb=

" required for osx clipboard
set clipboard=unnamed

" on splits
set splitright
set splitbelow

" default file format
set ffs=unix,mac,dos

" fold enabled
set foldmethod=indent
set foldlevel=5
" fold exception for startified, using startified's event
autocmd User Startified normal! zR


set textwidth=0        " more realistic size
set colorcolumn=+1
" highlight ColorColumn guibg=#2d2d2d ctermbg=246
" highlight Normal ctermfg=grey ctermbg=#0e143d

" highligh current row and column
set cursorline
" set cursorcolumn

" Tabs
set tabstop=2
set shiftwidth=2
set expandtab

set wrap
set linebreak
set showbreak=â†ª

set ttyfast
set title

set showcmd
set showmode

set viminfo='10,\"100,:100,%,n~/.viminfo

" invisible chars
set list
" set listchars=tab:â–¸\ ,eol:Â¬,trail:Â·,nbsp:Â·,space:Â·
set listchars=tab:â–¸\ ,trail:Â·,nbsp:Â·
" â†’

" history, backups and undo levels
set undofile
set history=1000
set undolevels=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif


filetype plugin on
filetype indent on

" vim uses
let g:pymode_python = 'python3'

" let g:pymode_folding=0
let g:pymode_rope = 0

" neovim
" Set python3 interpreter
let g:python_host_prog = '/usr/bin/python27'
let g:python3_host_prog = '/usr/bin/python3'
" Disable python2
" let g:loaded_python_provider = 1
" let g:loaded_python3_provider = 1

let g:mapleader = "\<Space>"
let g:maplocalleader = "\\"

if has('nvim')
    " NEOVIM ON
    set viminfo='10,\"100,:100,%,n~/.viminfo
else
    " Vim only
    set viminfo='10,\"100,:100,%,n~/.viminfo_vim
endif

" Macros
let @e = ':s,=,: ,g'
let @b = '/ xiwww'

" }}}

" Plugins to install {{{
call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'bsdelf/bufferhint'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dracula/vim'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'phenomenes/ansible-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-startify'
Plug 'pearofducks/ansible-vim'
Plug 'powerline/powerline'
Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'vimwiki/vimwiki'

Plug 'tpope/vim-surround'

" vimL lint
Plug 'ynkdir/vim-vimlparser'
Plug 'syngan/vim-vimlint'

" Which key?
Plug 'liuchengxu/vim-which-key'

if has("nvim")
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

call plug#end()
" }}}

" Plugin configurations {{{
"
let g:deoplete#enable_at_startup = 1

let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']

let g:ale_completion_enabled = 1
" let g:ale_linters = {
"       \ 'python': ['flake8'],
"       \ 'ansible': ['ansible', 'yamllint']
"       \ }
" let g:ale_fixers = {
"       \ 'python': ['isort', 'autopep8', 'yapf'],
"       \ }
let g:ale_yaml_yamllint_options='-d "{
      \ extends: default,
      \ rules: {
      \   line-length: {
      \     max: 120,
      \     level: warning }}}"'
let g:ale_set_quickfix = 1
let g:ale_set_loclist = 0
let g:ale_open_list = 0
let g:ale_lint_on_enter = 0

let g:netrw_banner                       = 0
let g:netrw_browse_split                 = 2
let g:netrw_winsize                      = 25
"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts            = 1
" let g:airline_section_b                  = '%{strftime("%F %H:%M")}'

" airline symbols
" let g:airline_left_sep                   = "\uE0C0"
" let g:airline_right_sep                  = "\uE0C2"
let g:airline_left_sep                   = 'î‚°'
let g:airline_left_alt_sep               = 'î‚±'
let g:airline_right_sep                  = 'î‚²'
let g:airline_right_alt_sep              = 'î‚³'

let g:pymode_lint_ignore                 = "E501"
let g:pymode_rope_lookup_project         = 0

let g:python_highlight_all               = 1

let g:org_agenda_files                   = ['~/git/work/org/*.org']

nnoremap - :call bufferhint#Popup()<CR>
nnoremap \ :call bufferhint#LoadPrevious()<CR>

" after changing the colorscheme, set italic for comments
" iterm2 needs a font with italics, also terminfo has to support italics
highlight Comment cterm=italic

" also respect the transparency of the terminal
highligh Normal ctermbg=none

set background=dark
try
    colorscheme solarized
    " colorscheme torte
    " colorscheme dracula
    " colorscheme nova
    " colorscheme morning
    " colorscheme darkblue
catch
    colorscheme default
endtry

let g:Powerline_symbols     = 'fancy'

let g:vimwiki_hl_headers    = 1
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_path=$HOME.'/git/work/vimwiki'
let g:vimwiki_html_path=$HOME.'/git/work/vimwiki_html'
let g:vimwiki_list = [{       'path': vimwiki_path,
                       \ 'path_html': vimwiki_html_path,
                       \ 'template_path': vimwiki_html_path.'/assets',
                       \ 'template_default': 'default',
                       \ 'template_ext': '.tpl'}]


let g:tagbar_width       = 25
let g:tagbar_compact     = 1
let g:tagbar_singleclick = 1
let g:tagbar_autoshowtag = 1


" }}}

" Autocommands & Autogroups {{{
"
augroup resCur
autocmd!
autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END


" fix crontab -e problem
set backupskip=/tmp/*,/private/tmp/*
" autocmd filetype crontab setlocal nobackup nowritebackup

autocmd VimResized * :wincmd =

" Remove trailing spaces for file types:
au BufWritePre *.py,*.c,*.rb,*.java %s/\s\+$//e

" Python section
augroup python
au!
au FileType python setl smarttab     " Use spaces instead of tabs.
au FileType python setl expandtab     " Use spaces instead of tabs.
au FileType python setl tabstop=4     " A tab counts for 4 spaces.
au FileType python setl softtabstop=4 " Causes backspace to delete 4 spaces.
au FileType python setl shiftwidth=4  " Shift by 4 spaces.
au FileType python setl foldmethod=indent " fold method is indent for python
augroup end

" Ruby section
augroup ruby
au!
augroup end

" Javascript section
augroup javascript
au!
augroup end

" Terraform section
augroup terraform
au!
au FileType terraform setl expandtab     " Use spaces instead of tabs.
au FileType terraform setl tabstop=2     " A tab counts for 4 spaces.
au FileType terraform setl softtabstop=2 " Causes backspace to delete 4 spaces.
au FileType terraform setl shiftwidth=2  " Shift by 4 spaces.
au FileType terraform setl foldmethod=indent " fold method is indent for terraform
au FileType terraform setl foldlevel=2 " fold method is indent for terraform
augroup end

" Git commits
augroup gitcommit
au!
au FileType gitcommit setl spell     " Enable spellchecking.
au FileType gitcommit setl expandtab " Use spaces instead of tabs.
augroup end

" Markdown
augroup markdown
au!
au FileType markdown setl spell         " Enable spellchecking.
au FileType markdown setl expandtab     " Use spaces instead of tabs.
au FileType markdown setl tabstop=2     " Lists are indented with 2 spaces.
au FileType markdown setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType markdown setl shiftwidth=2  " Shift by 2 spaces.
augroup end

augroup ansible
au!
au BufNewFile,BufRead *.yml set filetype=yaml.ansible
augroup end

augroup vimwiki
au!
au BufEnter * silent! lcd %:p:h
" au BufRead ~/git/work/vimwiki/index.wiki :!git pull<CR>
au BufWritePost ~/git/work/vimwiki/* :VimwikiDiaryGenerateLinks<CR>
au FileType vimwiki setl textwidth=80
augroup end


" Mappings {{{

imap jk <Esc>

nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>m :bp<CR>
nnoremap <Leader>c :tabnew<CR>
nnoremap <Leader>e :tabedit $MYVIMRC<CR>
" nnoremap <Leader>t :tabedit ~/org/index.org<CR>
nnoremap <Leader>b :NERDTreeToggle<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>E :EasyAlign=<CR>

nnoremap <Leader>i G?^import<CR>:nohlsearch<CR>oimport

inoremap # X<BS>#

map <Leader>h <C-w>h
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>l <C-w>l

" I want it to work on all modes
map <C-l> :buffers<CR>

imap <C-]> <ESC>

" }}}

" Functions and other {{{

" }}}
"
