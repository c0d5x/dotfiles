" vim: syntax=vim foldmethod=marker foldlevel=0

" Global variables {{{

set nocompatible

syntax on

" display number on left side and status bar
set ruler
set number

" monitor file changes
set autoread

" display statusbar
set laststatus=2

" indents
set autoindent
set smartindent

" lines from cursor to bottom
set scrolloff=10

set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.o
set wildignore+=*DS_Store*
set wildignore+=*.pyc

" decent backspace
set backspace=indent,eol,start

" when searching
set showmatch
set incsearch
set hlsearch

" annoying sounds
set noerrorbells
set novisualbell
set t_vb=

" required for osx clipboard
set clipboard=unnamed

" history and undo levels
set history=1000
set undolevels=1000

" on splits
set splitbelow
set splitright

" default file format
set ffs=unix,mac,dos

set foldmethod=syntax
set foldlevel=3

set textwidth=120        " more realistic size
set colorcolumn=+1
highlight ColorColumn guibg=#2d2d2d ctermbg=246
" highlight Normal ctermfg=grey ctermbg=#0e143d

" highligh current row and column
set cursorline
set cursorcolumn

" Tabs
set tabstop=4
set shiftwidth=4
set expandtab

set wrap
set linebreak
set showbreak=↪

set background=dark
" set guifont=Monaco:h13
set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12

" should be on but making sure
set ttyfast
set title

set showcmd
set showmode

" encoding
scriptencoding utf-8
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  " set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" invisible chars
set list
" set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·,space:·
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·
" →

" backups
set backup                        " enable backups
set noswapfile
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif


filetype plugin on
filetype indent on

let mapleader = "\<Space>"
let maplocalleader = "\\"
" }}}

" Plugins to install {{{
call plug#begin('~/.vim/plugged')
Plug 'davidhalter/jedi-vim'
" Plug 'tpope/vim-rails'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/vim-easy-align'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'
" Plug 'benekastah/neomake'
Plug 'scrooloose/syntastic'
" Plug 'vimwiki'
Plug 'mattn/calendar-vim'
Plug 'hdima/python-syntax'
Plug 'bling/vim-bufferline'
Plug 'airblade/vim-gitgutter'
Plug 'motemen/git-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'kien/rainbow_parentheses.vim'
Plug 'powerline/powerline'
Plug 'jceb/vim-orgmode'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dracula/vim'
Plug 'klen/python-mode'
Plug 'ryanoasis/vim-devicons'
call plug#end()
" }}}

" Plugin configurations {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts            = 1
let g:airline_left_sep  = "\uE0C0"
let g:airline_right_sep = "\uE0C2"

let g:jedi#goto_command             = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command    = "K"
let g:jedi#usages_command           = "<leader>u"
let g:jedi#completions_command      = "<C-Space>"
let g:jedi#rename_command           = "<leader>r"

let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<c-b>"
let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

let g:snips_author       = "Jose Hidalgo"
let g:snips_author_email = "c0d5x@protonmail.com"
let g:snips_email        = "c0d5x@protonmail.com"
let g:snips_github       = "https://github.com/c0d5x"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 0
let g:syntastic_loc_list_height          = 4
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

let g:syntastic_error_symbol         = "\u00A7"
let g:syntastic_style_error_symbol   = "\u2717"
let g:syntastic_warning_symbol       = "\u26A0"
let g:syntastic_style_warning_symbol = "\u0482"

let g:syntastic_enable_highlighting = 1

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails          = 1

let g:pymode_lint_ignore = "E501"

let python_highlight_all = 1

let g:org_agenda_files = ['~/org/*.org']

try
    " solarized requires solarized iterm's colors set in preferences
    " colorscheme solarized
    colorscheme dracula
    " colorscheme morning
catch
    colorscheme darkblue
endtry

"if exists(':RainbowParenthesesActivate')
   autocmd VimEnter * RainbowParenthesesActivate
   autocmd Syntax * RainbowParenthesesLoadRound
   autocmd Syntax * RainbowParenthesesLoadSquare
   autocmd Syntax * RainbowParenthesesLoadBraces
"endif

let g:Powerline_symbols = 'fancy'

let g:vimwiki_hl_headers = 1
let g:vimwiki_hl_cb_checked = 1
let vimwiki_path=$HOME.'/git/work/vimwiki'
let vimwiki_html_path=$HOME.'/git/work/vimwiki_html'
let g:vimwiki_list = [{       'path': vimwiki_path,
                       \ 'path_html': vimwiki_html_path,
                       \ 'template_path': vimwiki_html_path.'/assets',
                       \ 'template_default': 'default',
                       \ 'template_ext': '.tpl'}]


let g:tagbar_width = 25
let g:tagbar_compact = 1
let g:tagbar_singleclick = 1
let g:tagbar_autoshowtag = 1

" }}}

" Autocommands & Autogroups {{{

" fix crontab -e problem
" set backupskip=/tmp/*,/private/tmp/*
autocmd filetype crontab setlocal nobackup nowritebackup

" Reload when vimrc is changed
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" if exists(':Neomake')
"    autocmd! BufWritePost * Neomake
" endif

" if exists("g:loaded_tagbar")
    autocmd VimEnter * nested :call tagbar#autoopen(1)
" endif

autocmd VimResized * :wincmd =

" Remove trailing spaces for file types:
au BufWritePre *.py,*.c,*.rb,*.java %s/\s\+$//e

" Python section
augroup python
au!
au FileType python setl expandtab     " Use spaces instead of tabs.
au FileType python setl tabstop=4     " A tab counts for 4 spaces.
au FileType python setl softtabstop=4 " Causes backspace to delete 4 spaces.
au FileType python setl shiftwidth=4  " Shift by 4 spaces.
au FileType python setl foldmethod=indent " fold method is indent for python
" au FileType python nnoremap <Leader>r :!python -m pdb %<CR>
augroup end

" Ruby section
augroup ruby
au!
au FileType ruby nnoremap <Leader>r :w<CR>:!ruby -r debug %<CR>
augroup end

" Javascript section
augroup javascript
au!
augroup end


" Git commits
augroup gitcommit
au!
au FileType gitcommit setl spell     " Enable spellchecking.
au FileType gitcommit setl expandtab " Use spaces instead of tabs.
augroup end

" Markdown
augroup markdown
au!
au FileType markdown setl spell         " Enable spellchecking.
au FileType markdown setl expandtab     " Use spaces instead of tabs.
au FileType markdown setl tabstop=2     " Lists are indented with 2 spaces.
au FileType markdown setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType markdown setl shiftwidth=2  " Shift by 2 spaces.
augroup end

" autocmd FileType c nnoremap <buffer> <silent> <C-]> :YcmCompleter GoTo<cr>
" }}}

" Mappings {{{
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>m :bp<CR>
nnoremap <Leader>c :tabnew<CR>
nnoremap <Leader>e :tabedit $MYVIMRC<CR>
nnoremap <Leader>b :NERDTree<CR>
nnoremap <Leader>E :EasyAlign=<CR>

nnoremap <Leader>i G?^import<CR>:nohlsearch<CR>oimport 

nnoremap <Localleader>r :!python -m pdb %<CR>
inoremap # X<BS>#

map <Leader>h <C-w>h
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>l <C-w>l

" }}}

" Functions and other {{{

function! ScratchEdit(cmd, options)
    exe a:cmd tempname()
    setl buftype=nofile bufhidden=wipe nobuflisted
    if !empty(a:options) | exe 'setl' a:options | endif
endfunction
command! -bar -nargs=* Sedit    call ScratchEdit('edit', <q-args>)
command! -bar -nargs=* Ssplit   call ScratchEdit('split', <q-args>)
command! -bar -nargs=* Svsplit  call ScratchEdit('vsplit', <q-args>)
command! -bar -nargs=* Stabedit call ScratchEdit('tabe', <q-args>)

function! ShuffleLines()
ruby << EOF
    buf = VIM::Buffer.current
    firstnum =  VIM::evaluate('a:firstline')
    lastnum = VIM::evaluate('a:lastline')
    lines = []
    firstnum.upto(lastnum) do |lnum|
      lines << buf[lnum]
    end
    lines.shuffle!
    firstnum.upto(lastnum) do |lnum|
      buf[lnum] = lines[lnum-firstnum]
    end
EOF
endfunction
command! -bar Shuffle  call ShuffleLines()



" }}}
